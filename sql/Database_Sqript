CREATE TABLE cities
( city_id varchar2(100) NOT NULL,
  city_name varchar2(100) NOT NULL,
  PRIMARY KEY (city_id)
);

CREATE TABLE regions
( region_id varchar2(100) NOT NULL,
region_name varchar2(100) NOT NULL,
PRIMARY KEY (region_id)
);

CREATE TABLE currencies
( currency_id varchar2(100) NOT NULL,
currency_name varchar2(100) NOT NULL,
PRIMARY KEY (currency_id)
);

CREATE TABLE ORGTYPES
( orgtype_id varchar2(100) NOT NULL,
orgtype_name varchar2(100) NOT NULL,
PRIMARY KEY (orgtype_id)
);

CREATE TABLE JOBS_STATE
( job_id number NOT NULL,
  job_name varchar2(50) NOT NULL,
  job_state varchar2(50),
  refresh_date TIMESTAMP(6) WITH TIME ZONE,
  PRIMARY KEY (job_id)
);

CREATE TABLE organizations
( id number not null,
  org_id varchar2(100) NOT NULL,
  old_org_id number NULL,
  org_type varchar2(10) NULL,
  title varchar2(100) NULL,
  branch char(1) NULL,
  region varchar2(100) NULL,
  city varchar2(100) NULL,
  phone varchar2(100) NULL,
  address varchar2(200) NULL,
  link_type varchar2(100) NULL,
  link varchar2(100) NULL,
  actual_date timestamp null,
  PRIMARY KEY (id)
);

CREATE TABLE actual_currency_rate
(record_id number not null,
 id_from_org number not null,
 currency_id varchar2(100) NOT NULL,
 asc_rate decimal(6,4) NULL,
 buy_rate decimal(6,4) NULL,
 PRIMARY KEY (record_id)
);

 CREATE SEQUENCE organizations_seq
  MINVALUE 1 MAXVALUE 999999999999999
  START WITH 1
  INCREMENT BY 1
  CACHE 20
  NOORDER NOCYCLE;

 --create or replace trigger organizations_id_trg
 before insert on organizations
 for each row
 begin
   if :new.id is null then
     select organizations_seq.nextval into :new.id from dual;
   end if;
 end;--

    CREATE SEQUENCE actual_currency_rate_seq
      MINVALUE 1 MAXVALUE 999999999999999
      START WITH 1
      INCREMENT BY 1
      CACHE 20
      NOORDER NOCYCLE;

 --create or replace trigger actual_currency_rate_id_trg
 before insert on actual_currency_rate
 for each row
 begin
   if :new.id_from_org is null then
     select actual_currency_rate_seq.nextval into :new.id_from_org from dual;
   end if;
 end;--

INSERT INTO JOBS_STATE (job_id, job_name, job_state, refresh_date)
   VALUES (1, 'DataUpdate', NULL, NULL);
 commit;
